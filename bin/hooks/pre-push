#!/bin/sh
# FROM GRIT SUITE

# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

# Utilities
say() {
  GRIT="\033[0;34mGrit:\033[0m"
  printf "$GRIT $1\n"
}
warn() {
  GRIT="\033[0;31mGrit:\033[0m"
  printf "$GRIT $1\n"
}

remote="$1"
url="$2"


submodules=$(git submodule status)
abort_push="false"
while read -r info
do
    IFS=' ' read -r sha modname heads <<< "$info"
		branch=`echo $heads| tr -d \(\) | sed 's/heads\/\(.*\)/\1/'`
		cd $modname
		modified=`git status --porcelain --untracked-files=no`
		if [ ! -z "$modified" ]; then
			abort_push="true"
			warn "submodule ${modname} has modifications. Please commit your changes first"
		fi
		# Check if it is in a detached state, cause if it is, we do not know if there are pending commits to push
		detached=$(git symbolic-ref -q HEAD || echo "__YES__")
		if [ "$detached" != "__YES__" ]  && [ "$(git rev-parse @{u})" != "$(git rev-parse --quiet HEAD)" ]; then
			# Note: we could automatically push them...
			abort_push="true"
			warn "submodule ${modname} has commits not pushed upstream. Push your changes first"
		fi
		cd ..
done <<< "$submodules"

if [ "$abort_push" == "true" ]; then
	warn "Aborting the push until those issues have been resolved."
	exit 1 
fi
exit 0






